// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"

export interface ListItem {
    readonly id: number
    text: string
    author: string
    done: boolean
}

interface ListApiResponse {
    list: ListItem[]
    total: number
    skip: number
    limit: number
}


// Define a service using a base URL and expected endpoints
export const listApiSlice = createApi({
    baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:1337/todo" }),
    reducerPath: "listApi",
    // Tag types are used for caching and invalidation.
    tagTypes: ["List"],
    endpoints: build => ({
        // Supply generics for the return type (in this case `QuotesApiResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        getList: build.query<ListApiResponse, number>({
            query: (limit = 10) => `?limit=${limit}`,
            // `providesTags` determines which 'tag' is attached to the
            // cached data returned by the query.
            providesTags: (result, error, id) => [{ type: "List", id }],
        }),
        addListItem: build.mutation<ListItem, Partial<ListItem>>({
            query: (body) => ({
                url: ``,
                method: 'POST',
                body,
            }),
            invalidatesTags: ['List'],
        })
    }),

})

// Hooks are auto-generated by RTK-Query
// Same as `listApiSlice.endpoints.getQuotes.useQuery`
export const { useGetListQuery , useAddListItemMutation } = listApiSlice